# Generated by Django 2.2.10 on 2020-03-07 01:34

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailVerifyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Verification Code', max_length=20, verbose_name='Verification Code')),
                ('email', models.EmailField(help_text='mailbox', max_length=50, verbose_name='mailbox')),
                ('send_type', models.CharField(choices=[('register', 'register'), ('forget', 'Retrieve Password'), ('update_email', 'Modify Email'), ('comment', 'comment')], help_text='Verification code type', max_length=15, verbose_name='Verification code type')),
                ('send_time', models.DateTimeField(auto_now_add=True, help_text='send time', null=True, verbose_name='send time')),
            ],
            options={
                'verbose_name': 'Mail Verification Code',
                'verbose_name_plural': 'Mail Verification Code',
            },
        ),
        migrations.CreateModel(
            name='GuestProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, null=True)),
                ('username', models.CharField(blank=True, help_text='user name', max_length=50, null=True, verbose_name='user name')),
                ('nick_name', models.CharField(default='', help_text='nickname', max_length=50, verbose_name='nickname')),
                ('mobile', models.CharField(blank=True, help_text='phone', max_length=11, null=True, verbose_name='phone')),
                ('email', models.CharField(blank=True, help_text='mail', max_length=100, null=True, verbose_name='mail')),
                ('avatar', models.ImageField(blank=True, default='user/avatar/image/guest.png', help_text='Avatar', null=True, upload_to='user/avatar/image/%Y/%m', verbose_name='Avatar')),
                ('is_subcribe', models.BooleanField(blank=True, default=True, help_text='notification emails other than verification code notification emails', verbose_name='whether to subscribe to notification emails')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
            ],
            options={
                'verbose_name': 'Guest',
                'verbose_name_plural': 'Guest',
            },
        ),
        migrations.CreateModel(
            name='VerifyCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=10, verbose_name='Verification Code')),
                ('mobile', models.CharField(max_length=11, verbose_name='phone')),
                ('add_time', models.DateTimeField(default=datetime.datetime.now, verbose_name='Add Time')),
            ],
            options={
                'verbose_name': 'SMS Verification',
                'verbose_name_plural': 'SMS Verification',
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nick_name', models.CharField(default='', help_text='nickname', max_length=50, verbose_name='nickname')),
                ('name', models.CharField(blank=True, help_text='Name', max_length=30, null=True, verbose_name='Name')),
                ('birthday', models.DateTimeField(blank=True, help_text='birthday', null=True, verbose_name='birthday')),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], default='female', help_text='Gender', max_length=6, verbose_name='Gender')),
                ('mobile', models.CharField(blank=True, help_text='phone', max_length=11, null=True, verbose_name='phone')),
                ('email', models.CharField(blank=True, help_text='mail', max_length=100, null=True, verbose_name='mail')),
                ('avatar', models.ImageField(blank=True, help_text='avatar', null=True, upload_to='user/avatar/image/%Y/%m', verbose_name='avatar')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'User',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
