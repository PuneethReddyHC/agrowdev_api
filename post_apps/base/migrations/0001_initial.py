# Generated by Django 2.2.10 on 2020-03-07 01:34

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('material', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='BloggerInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='name', max_length=20, verbose_name='name')),
                ('en_name', models.CharField(blank=True, help_text='Name English', max_length=20, null=True, verbose_name='Name English')),
                ('desc', models.CharField(default='', help_text='Introduction', max_length=300, verbose_name='Introduction')),
                ('en_desc', models.CharField(default='', help_text='Introduction', max_length=300, verbose_name='Introduction')),
                ('avatar', models.ImageField(blank=True, help_text='100 *100', null=True, upload_to='base/avatar/image/%y/%m', verbose_name='avatar')),
                ('background', models.ImageField(blank=True, help_text='333 *125', null=True, upload_to='base/background/image/%y/%m', verbose_name='background image')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
            ],
            options={
                'verbose_name': 'Personal Information',
                'verbose_name_plural': 'Personal Informationlist',
            },
        ),
        migrations.CreateModel(
            name='FriendLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name', max_length=30, verbose_name='name')),
                ('desc', models.CharField(help_text='Introduction', max_length=100, verbose_name='Introduction')),
                ('image', models.ImageField(blank=True, help_text='picture', null=True, upload_to='base/friendlink/image/%y/%m', verbose_name='picture')),
                ('url', models.URLField(help_text='link', verbose_name='link')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
            ],
            options={
                'verbose_name': 'Friendly Link',
                'verbose_name_plural': 'Friendly Linklist',
            },
        ),
        migrations.CreateModel(
            name='NavigationLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='name', max_length=30, verbose_name='name')),
                ('en_name', models.CharField(blank=True, help_text='English name', max_length=30, null=True, verbose_name='English name')),
                ('desc', models.CharField(help_text='Introduction', max_length=100, verbose_name='Introduction')),
                ('en_desc', models.CharField(blank=True, help_text='English introduction', max_length=100, null=True, verbose_name='English introduction')),
                ('image', models.ImageField(blank=True, help_text='picture', null=True, upload_to='base/friendlink/image/%y/%m', verbose_name='picture')),
                ('url', models.CharField(help_text='link', max_length=200, verbose_name='link')),
                ('target', models.CharField(blank=True, choices=[('_blank', 'blank-Browser always loads the target document in a newly opened, unnamed window.'), ('_self', 'self-The value of this target is the default target for all <a> tags without a target specified, which causes the target document to be loaded and displayed in the same frame or window as the source document. This target is redundant and unnecessary unless Used with the target attribute in the document title <base> tag. '), ('_parent', 'parent-This target causes the document to load into the parent window or frameset containing frames referenced by hyperlinks. If this reference is in a window or in a top-level frame, it is equivalent to target _self.'), ('_top', 'top-this target causes the document to load into the window containing this hyperlink. Using the _top target will clear all included frames and load the document into the entire browser window.')], help_text='corresponds to the target attribute in the a tag', max_length=10, null=True, verbose_name='Target category')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
            ],
            options={
                'verbose_name': 'Custom Navigation',
                'verbose_name_plural': 'Custom Navigationlist',
            },
        ),
        migrations.CreateModel(
            name='SiteInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='name', max_length=20, verbose_name='name')),
                ('en_name', models.CharField(blank=True, help_text='Name English', max_length=20, null=True, verbose_name='Name English')),
                ('desc', models.CharField(default='', help_text='Introduction', max_length=150, verbose_name='Introduction')),
                ('en_desc', models.CharField(blank=True, help_text='Introduction', max_length=150, null=True, verbose_name='Introduction')),
                ('keywords', models.CharField(default='', help_text='keyword', max_length=300, verbose_name='keyword')),
                ('icon', models.ImageField(blank=True, help_text='icon', null=True, upload_to='base/site/image/%y/%m', verbose_name='icon')),
                ('background', models.ImageField(blank=True, help_text='background image', null=True, upload_to='base/site/image/%y/%m', verbose_name='background image')),
                ('api_base_url', models.URLField(max_length=30, verbose_name='API InterfaceBaseURL')),
                ('copyright', models.CharField(default='', help_text='copyright', max_length=100, verbose_name='copyright')),
                ('copyright_desc', models.CharField(default='', help_text='copyright Chinese', max_length=300, verbose_name='copyright Chinese')),
                ('copyright_desc_en', models.CharField(default='', help_text='copyright English', max_length=300, verbose_name='copyright English')),
                ('icp', models.CharField(default='', help_text='ICP', max_length=20, verbose_name='ICP')),
                ('is_live', models.BooleanField(default=False, help_text='is active', verbose_name='is active')),
                ('is_force_refresh', models.BooleanField(default=False, help_text='is used to control whether the front-end page is forced to refresh the local cache', verbose_name='whether to force a refresh')),
                ('force_refresh_time', models.DateTimeField(blank=True, help_text="The time will be returned to the front end. The front end compares the local storage time of the browser with this time. If the forced refresh time of the browser's local storage is earlier than this time, a forced refresh of the browser's local cache will be performed", null=True, verbose_name='force refresh time')),
                ('access_password', models.CharField(blank=True, help_text='browse password', max_length=20, null=True, verbose_name='access password')),
                ('access_password_encrypt', models.CharField(blank=True, help_text='Access password encryption', max_length=100, null=True, verbose_name='Browse password encryption')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
            ],
            options={
                'verbose_name': 'Site Information',
                'verbose_name_plural': 'Site Informationlist',
            },
        ),
        migrations.CreateModel(
            name='SiteInfoNavigation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='name', max_length=20, verbose_name='name')),
                ('index', models.IntegerField(default=0, help_text='order', verbose_name='order')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
                ('navigation', models.ForeignKey(help_text='navigation', on_delete=django.db.models.deletion.CASCADE, to='base.NavigationLink', verbose_name='navigation')),
                ('site', models.ForeignKey(help_text='website', on_delete=django.db.models.deletion.CASCADE, to='base.SiteInfo', verbose_name='website')),
            ],
            options={
                'verbose_name': 'Navigation Information',
                'verbose_name_plural': 'Navigation Informationlist',
            },
        ),
        migrations.AddField(
            model_name='siteinfo',
            name='navigations',
            field=models.ManyToManyField(help_text='Custom Navigation', through='base.SiteInfoNavigation', to='base.NavigationLink', verbose_name='Custom Navigation'),
        ),
        migrations.CreateModel(
            name='BloggerSocial',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='name', max_length=20, verbose_name='name')),
                ('index', models.IntegerField(default=0, help_text='order', verbose_name='order')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
                ('blogger', models.ForeignKey(help_text='person', on_delete=django.db.models.deletion.CASCADE, to='base.BloggerInfo', verbose_name='person')),
                ('social', models.ForeignKey(help_text='Social Platform', on_delete=django.db.models.deletion.CASCADE, to='material.MaterialSocial', verbose_name='Social Platform')),
            ],
            options={
                'verbose_name': 'Social Information',
                'verbose_name_plural': 'Social Informationlist',
            },
        ),
        migrations.CreateModel(
            name='BloggerMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', help_text='name', max_length=20, verbose_name='name')),
                ('index', models.IntegerField(default=0, help_text='order', verbose_name='order')),
                ('add_time', models.DateTimeField(auto_now_add=True, help_text='Add Time', null=True, verbose_name='Add Time')),
                ('blogger', models.ForeignKey(help_text='person', on_delete=django.db.models.deletion.CASCADE, to='base.BloggerInfo', verbose_name='person')),
                ('master', models.ForeignKey(help_text='skill', on_delete=django.db.models.deletion.CASCADE, to='material.MaterialMaster', verbose_name='skill')),
            ],
            options={
                'verbose_name': 'Skill Information',
                'verbose_name_plural': 'Skill Informationlist',
            },
        ),
        migrations.AddField(
            model_name='bloggerinfo',
            name='masters',
            field=models.ManyToManyField(through='base.BloggerMaster', to='material.MaterialMaster'),
        ),
        migrations.AddField(
            model_name='bloggerinfo',
            name='socials',
            field=models.ManyToManyField(through='base.BloggerSocial', to='material.MaterialSocial'),
        ),
    ]
